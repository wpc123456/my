#!/usr/bin/env node

/**
 * Module dependencies.
 * www整个程序的可执行文件，运行www即可运行当前的程序
 */

var app = require('../app');//引入app自定义模块
/*引入debug模块
 ('blog:server')：debug名字
* debug 打印调试信息
* */
var debug = require('debug')('blog:server');
//创建服务
var http = require('http');

/**
 * Get port from environment and store in Express.
 * normalizePort：规范化端口
 * || 获取环境变量PORT的值，值存在话直接用环境变量，
 */
    //process.env:获取当前进程的环境变量，若值不存在的话默认使用3000
var port = normalizePort(process.env.PORT || '3000');
//设置端口
app.set('port', port)

/**
 * Create HTTP server.
 * 创建http服务
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//监听端口
server.listen(port);
//监听错误
server.on('error', onError);
//监听成功后的回调方法
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
